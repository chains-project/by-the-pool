#include "bytecode_schema.dl"

// Facts for ClassA
Class("reference", "org.example.A", ["m1", ["m2", nil]]).
Method("m1", "m1", ["m1_aload_0", ["m1_invokevirtual", ["m1_return", nil]]]).
Method("m2", "m2", ["m2_iconst1", ["m2_ireturn", nil]]).
Instruction("m1_aload_0", "aload_0").
Instruction("m1_invokevirtual", "invokevirtual").
Instruction("m1_return", "return").
Instruction("m2_iconst1", "iconst1").
Instruction("m2_ireturn", "ireturn").


Class("rebuild", "org.example.A", ["m1", ["m2", nil]]).
Method("m1", "m1", ["m1_aload_1", ["m1_invokevirtual", ["m1_return", nil]]]).
Method("m2", "m2", ["m2_iconst1", ["m2_ireturn", nil]]).
Instruction("m1_aload_1", "aload_1").
Instruction("m1_invokevirtual", "invokevirtual").
Instruction("m1_return", "return").
Instruction("m2_iconst1", "iconst1").
Instruction("m2_ireturn", "ireturn").

.decl head_of(head: NodeId, tail: NodeId_List)
head_of(head, tail) :-
    parent_of_list(_, [head, tail], _).
head_of(head, tail) :-
    head_of(_, [head, tail]).

.decl predecessor_of(x: NodeId, y: NodeId)
predecessor_of(x, y) :-
    head_of(x, [y, _]).

/* does the list contain the element? */
.decl list_contains(list: NodeId_List, id: NodeId)
list_contains([head,tail], head) :-
    parent_of_list(_, [head, tail], _).
list_contains(list, b) :-
    list_contains(list, a),
    predecessor_of(a, b).

.decl MethodOfClass(class_name: symbol, method_name: symbol)
MethodOfClass(class_name, method_name) :-
    Method(method_id, method_name, _),
    Class(_, class_name, methods),
    list_contains(methods, method_id).

.decl MatchedMethods(method1: symbol, method2: symbol)
MatchedMethods(method1, method2) :-
    MethodOfClass(_, method1),
    MethodOfClass(_, method2),
    method1 = method2.

.decl MismatchInstructions(method1: symbol, method2: symbol, instruction: NodeId)
.output MismatchInstructions
MismatchInstructions(method1, method2, instruction) :-
    MatchedMethods(method1, method2),
    MethodOfClass(class1, _),
    MethodOfClass(class2, _),
    class1 = class2,
    Method(method1, _, instructions1),
    Method(method2, _, instructions2),
    method1 = method2,
    list_contains(instructions1, instruction),
    !list_contains(instructions2, instruction).




