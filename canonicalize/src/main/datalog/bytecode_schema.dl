.type NodeId <: symbol
.type NodeId_List = [first: NodeId, rest: NodeId_List]

.decl name_of(id: NodeId, name: symbol)
.decl parent_of(parent: NodeId, child: NodeId, relation: symbol)
.decl parent_of_list(parent: NodeId, children: NodeId_List, relation: symbol)

.decl Instruction(id: NodeId, opcode: symbol)
.input Instruction
Instruction(id, opcode) :-
    name_of(id, opcode).

.decl Method(id: NodeId, name: symbol, instructions: NodeId_List)
Method(id, name, instructions) :-
    name_of(id, name),
    parent_of_list(id, instructions, "instructions").

.decl Class(id: NodeId, name: symbol, methods: NodeId_List)
Class(id, name, methods) :-
    name_of(id, name),
    parent_of_list(id, methods, "methods").