.type NodeId <: symbol
.type NodeId_List = [first: NodeId, rest: NodeId_List]

.decl name_of(id: NodeId, name: symbol)
.decl parent_of(parent: NodeId, child: NodeId, relation: symbol)
.decl parent_of_list(parent: NodeId, children: NodeId_List, relation: symbol)
parent_of_list(parent, [first, rest], "methods") :-
    Class(parent, _, [first, rest]).
parent_of_list(parent, [first, rest], "instructions") :-
    Method(parent, _, [first, rest]).

.decl Instruction(id: NodeId, opcode: symbol)

.decl Method(id: NodeId, name: symbol, instructions: NodeId_List)

.decl Class(id: NodeId, name: symbol, methods: NodeId_List)
